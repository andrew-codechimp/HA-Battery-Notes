[tool.poetry]
authors = ["Andrew Jackson <andrew@codechimp.org>"]
classifiers = [
  "Development Status :: 5 - Production/Stable",
  "Framework :: AsyncIO",
  "Intended Audience :: Developers",
  "Natural Language :: English",
  "Programming Language :: Python :: 3.13",
  "Programming Language :: Python :: 3",
]
description = "HA-Battery-Notes - A Home Assistant integration to provide battery notes of devices"
documentation = "https://github.com/andrew-codechimp/HA-Battery-Notes"
homepage = "https://github.com/andrew-codechimp/HA-Battery-Notes"
license = "MIT"
maintainers = ["Andrew Jackson <andrew@codechimp.org>"]
name = "HA-Battery-Notes"
packages = []
readme = "README.md"
repository = "https://github.com/andrew-codechimp/HA-Battery-Notes"
version = "0.0.0"

[tool.poetry.dependencies]
homeassistant = "2024.12.0"
python = ">=3.13,<3.14"

[tool.poetry.group.dev.dependencies]
pre-commit = "4.2.0"
pre-commit-hooks = "5.0.0"
pylint = "3.3.6"
ruff = "0.11.4"

[tool.poetry.urls]
"Bug Tracker" = "https://github.com/andrew-codechimp/HA-Battery-Notes/issues"
Changelog = "https://github.com/andrew-codechimp/HA-Battery-Notes/releases"

[build-system]
build-backend = "poetry.core.masonry.api"
requires = ["poetry-core"]

[tool.lint.ruff]
ignore = [
  "ANN101", # Self... explanatory
  "ANN401", # Opiniated warning on disallowing dynamically typed expressions
  "D203",   # Conflicts with other rules
  "D213",   # Conflicts with other rules
  "TID252", # Relative imports
  "RUF012", # Just broken
  "D202",   # No blank lines allowed after function docstring
  "D203",   # 1 blank line required before class docstring
  "D213",   # Multi-line docstring summary should start at the second line
  "D404",   # First word of the docstring should not be This
  "D406",   # Section name should end with a newline
  "D407",   # Section name underlining
  "D411",   # Missing blank line before section
  "E501",   # line too long
  "E731",   # do not assign a lambda expression, use a def


  # Formatter conflicts
  "COM812",
  "COM819",
  "D206",
  "E501",
  "ISC001",
  "Q000",
  "Q001",
  "Q002",
  "Q003",
  "W191",
]
select = ["ALL"]
src = ["custom_components/battery_notes"]

[tool.link.flake8-import-conventions.extend-aliases]
"homeassistant.helpers.area_registry" = "ar"
"homeassistant.helpers.config_validation" = "cv"
"homeassistant.helpers.device_registry" = "dr"
"homeassistant.helpers.entity_registry" = "er"
"homeassistant.helpers.issue_registry" = "ir"
voluptuous = "vol"

[tool.lint.isort]
force-sort-within-sections = true
known-first-party = ["homeassistant"]
combine-as-imports = true

[tool.pylint."MESSAGES CONTROL"]
# Reasons disabled:
# format - handled by ruff
# duplicate-code - unavoidable
# used-before-assignment - false positives with TYPE_CHECKING structures
disable = [
  "abstract-method",
  "duplicate-code",
  "format",
  "unexpected-keyword-arg",
  "used-before-assignment",
]

[tool.mypy]
# Specify the target platform details in config, so your developers are
# free to run mypy on Windows, Linux, or macOS and get consistent
# results.
platform = "linux"
python_version = "3.13"

# show error messages from unrelated files
follow_imports = "normal"

# suppress errors about unsatisfied imports
ignore_missing_imports = true

# be strict
# check_untyped_defs = true
# disallow_any_generics = true
# disallow_incomplete_defs = true
# disallow_subclassing_any = true
# disallow_untyped_calls = true
# disallow_untyped_decorators = true
# disallow_untyped_defs = true
# no_implicit_optional = true
# strict_optional = true
# warn_incomplete_stub = true
# warn_no_return = true
# warn_redundant_casts = true
# warn_return_any = true
# warn_unused_configs = true
# warn_unused_ignores = true

[tool.ruff.lint.mccabe]
max-complexity = 25

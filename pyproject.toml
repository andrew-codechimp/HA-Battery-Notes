[project]
name = "ha-battery-notes"
version = "0.0.0"
description = "HA-Battery-Notes - A Home Assistant integration to provide battery notes of devices"
authors = [{ email = "Andrew Jackson <andrew@codechimp.org>" }]
maintainers = [{ email = "Andrew Jackson <andrew@codechimp.org>" }]

readme = "README.md"
license = "MIT"
classifiers = [
  "Development Status :: 5 - Production/Stable",
  "Framework :: AsyncIO",
  "Intended Audience :: Developers",
  "Natural Language :: English",
  "Programming Language :: Python :: 3.13",
  "Programming Language :: Python :: 3",
]
requires-python = "==3.13.2"
dependencies = ["homeassistant==2025.4.0"]

[project.urls]
documentation = "https://github.com/andrew-codechimp/HA-Battery-Notes"
homepage = "https://github.com/andrew-codechimp/HA-Battery-Notes"
repository = "https://github.com/andrew-codechimp/HA-Battery-Notes"
"Bug Tracker" = "https://github.com/andrew-codechimp/HA-Battery-Notes/issues"
Changelog = "https://github.com/andrew-codechimp/HA-Battery-Notes/releases"

[dependency-groups]
dev = [
    "colorlog>=6.10.1",
    "ruff>=0.14.2",
]

[tool.ruff]
target-version = "py313"
src = ["custom_components/battery_notes"]

[tool.ruff.format]
docstring-code-format = true
docstring-code-line-length = "dynamic"
line-ending = "auto"

[tool.ruff.lint]
select = ["ALL"]
ignore = [
  # Annotation and type hint rules
  "ANN401", # Disallowing dynamically typed expressions (too strict)

  # Docstring convention conflicts
  "D202", # No blank lines allowed after function docstring
  "D203", # 1 blank line required before class docstring
  "D213", # Multi-line docstring summary should start at the second line
  "D404", # First word of the docstring should not be "This"
  "D406", # Section name should end with a newline
  "D407", # Section name underlining
  "D411", # Missing blank line before section

  # Style/tidiness adjustments
  "TID252", # Relative imports
  "E731",   # Do not assign a lambda expression, use a def

  # Formatting conflicts (black/ruff fmt)
  "COM812",
  "COM819",
  "D206",
  "E501",   # Line too long (handled by formatter)
  "ISC001",
  "Q000",
  "Q001",
  "Q002",
  "Q003",
  "W191",
  "RUF012", # Broken rule in some cases

  "RUF001", # String contains ambiguous character
  "S101",   # Use of assert detected
  "TC001",  # Move application import into type checking

  # TODO: Temporary ignores, to review
  "ANN001",  # Missing type annotation for function argument
  "ANN201",  # Missing return type annotation for public function
  "ANN202",  # Missing return type annotation for private function
  "ANN204",  # Missing return type annotation for special method
  "ARG001",  # Unused function argument
  "ARG002",  # Unused method argument
  "ARG004",  # Unused static method argument
  "COM818",  # Trailing comma on bare tuple prohibited
  "D204",    # 1 blank line required after class docstring
  "DTZ005",  # The use of `datetime.datetime.now()` without `tz` argument is not allowed
  "EM101",   # Exception must not use a string literal, assign to variable first
  "EM102",   # Exception must not use an f-string literal, assign to variable first
  "ERA001",  # Found commented-out code
  "FBT001",  # Boolean-typed positional argument in function definition
  "FBT002",  # Boolean-typed positional argument in function definition
  "G004",    # Logging statement uses f-string
  "I001",    # Import block is un-sorted or un-formatted
  "INP001",  # File is part of an implicit namespace package
  "PGH003",  # Use specific rule codes when ignoring type issues
  "PLR0912", # Too many branches
  "PLR0913", # Too many arguments in function definition
  "PLR0915", # Too many statements
  "PLR2004", # Magic value used in comparison
  "PLR5501", # Use `elif` instead of `else` then `if`
  "PLW2901", # `for` loop variable overwritten by assignment target
  "PTH103",  # `os.makedirs()` should be replaced by `Path.mkdir()`
  "PTH104",  # `os.rename()` should be replaced by `Path.rename()`
  "PTH118",  # `os.path.join()` should be replaced by `Path` with `/` operator
  "PTH120",  # `os.path.dirname()` should be replaced by `Path.parent`
  "PTH123",  # `open()` should be replaced by `Path.open()`
  "PYI041",  # Use `float` instead of `int | float`
  "RET504",  # Unnecessary assignment before `return` statement
  "RET505",  # Unnecessary `else` after `return` statement
  "RUF059",  # Unpacked variable is never used
  "SIM102",  # Use a single `if`-statement instead of nested `if`-statements
  "SIM103",  # Return the condition directly
  "SLF001",  # Private member accessed
  "TC003",   # Move standard library import into a type-checking block
  "TC006",   # Move third-party import into a type-checking block
  "TRY003",  # Avoid specifying long messages outside the exception class
  "TRY004",  # Prefer `TypeError` exception for invalid type
  "TRY300",  # Consider moving this statement to an `else` block
  "TRY400",  # Use `logging.exception` instead of `logging.error`
  "UP039",   # Unnecessary parentheses after class name
  "W292",    # No newline at end of file
]


[tool.ruff.lint.mccabe]
max-complexity = 25

[tool.ruff.lint.isort]
length-sort = true
section-order = [
  "future",
  "standard-library",
  "third-party",
  "first-party",
  "local-folder",
]
known-first-party = ["homeassistant"]
combine-as-imports = true

[tool.ruff.lint.flake8-import-conventions.extend-aliases]
"homeassistant.helpers.area_registry" = "ar"
"homeassistant.helpers.config_validation" = "cv"
"homeassistant.helpers.device_registry" = "dr"
"homeassistant.helpers.entity_registry" = "er"
"homeassistant.helpers.issue_registry" = "ir"
voluptuous = "vol"

[tool.mypy]
# Specify the target platform details in config, so your developers are
# free to run mypy on Windows, Linux, or macOS and get consistent
# results.
platform = "linux"

# show error messages from unrelated files
follow_imports = "normal"

# suppress errors about unsatisfied imports
ignore_missing_imports = true

# be strict
# check_untyped_defs = true
# disallow_any_generics = true
# disallow_incomplete_defs = true
# disallow_subclassing_any = true
# disallow_untyped_calls = true
# disallow_untyped_decorators = true
# disallow_untyped_defs = true
# no_implicit_optional = true
# strict_optional = true
# warn_incomplete_stub = true
# warn_no_return = true
# warn_redundant_casts = true
# warn_return_any = true
# warn_unused_configs = true
# warn_unused_ignores = true
